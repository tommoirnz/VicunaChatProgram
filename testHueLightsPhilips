import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import sys
from phue import Bridge
import time
import numpy as np
#Just a test foir your lights stand alone before anything else. Make sure this works
#And you have your IP address in place (below). Make sure you have the right mappings too
#your Bridge numberings may not be 1,2,3,4 but say 5,6,7,8 or something else
# ---------------------------
# Global Variables and Hue Bridge Setup
# ---------------------------
HUE_BRIDGE_IP = "192.168.178.197"
hue_bridge = None
real_lights_enabled = True  # Set to False to disable real light updates


def connect_hue_bridge(ip_address):
    global hue_bridge
    try:
        hue_bridge = Bridge(ip_address)
        hue_bridge.connect()  # Press the button on your bridge if needed.
        print(f"Connected to Hue Bridge at {ip_address}")
    except Exception as e:
        print(f"Hue Bridge connection error: {e}")
        sys.exit(1)


def update_real_light(physical_light, state):
    """
    Update the physical light with id physical_light.
    If state is 'on', sets brightness to 254; if 'off', turns it off.
    """
    global hue_bridge, real_lights_enabled
    if not real_lights_enabled:
        return
    if hue_bridge is None:
        print("No Hue Bridge connected.")
        return
    try:
        if state.lower() == "on":
            # Using an atomic update:
            hue_bridge.set_light(physical_light, {'on': True, 'bri': 254})
            print(f"Real light {physical_light} turned on (bri 254).")
        else:
            hue_bridge.set_light(physical_light, {'on': False})
            print(f"Real light {physical_light} turned off.")
    except Exception as e:
        print(f"Error updating real light {physical_light}: {e}")


# ---------------------------
# Light Simulator Window
# ---------------------------
class LightSimulatorWindow(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Light Simulator")
        self.geometry("500x400")
        self.configure(bg="white")

        # Data structure for simulated lights:
        # Each simulated light is represented by:
        #  - its current state ("on"/"off")
        #  - a canvas circle
        #  - a combobox for the physical light ID mapping
        self.num_simulated = 4
        self.light_states = {i: "off" for i in range(1, self.num_simulated + 1)}
        self.light_ids = {}  # canvas object IDs
        self.mapping_comboboxes = {}  # store comboboxes for physical light selection

        # Create canvas to display simulated lights.
        self.canvas = tk.Canvas(self, bg="white", height=200)
        self.canvas.pack(pady=20)
        self.create_simulated_lights()

        # Create control frame for each light's mapping combobox and toggle button.
        self.control_frame = tk.Frame(self, bg="white")
        self.control_frame.pack(pady=10)
        self.create_controls()

    def create_simulated_lights(self):
        spacing = 50
        radius = 30
        for i in range(1, self.num_simulated + 1):
            x = spacing + (i - 1) * (2 * radius + spacing) + radius
            y = 100
            # Create circle (initially off -> black fill)
            light_id = self.canvas.create_oval(
                x - radius, y - radius, x + radius, y + radius,
                fill="black", outline="gray", width=2)
            self.light_ids[i] = light_id
            # Label the light
            self.canvas.create_text(x, y + radius + 15, text=f"Simulated Light {i}")

    def create_controls(self):
        # For each simulated light, add a combobox to select the physical light ID
        # and a toggle button.
        for i in range(1, self.num_simulated + 1):
            frame = tk.Frame(self.control_frame, bg="white")
            frame.pack(pady=5)
            label = tk.Label(frame, text=f"Simulated Light {i} â†’ Physical ID:", bg="white")
            label.pack(side="left", padx=5)
            # Create combobox with a list of possible physical IDs (for example, 1 to 20)
            # Set default for simulated light 1 to 5, 2 to 6, 3 to 7, 4 to 11.
            possible_ids = [str(n) for n in range(1, 21)]
            combo = ttk.Combobox(frame, values=possible_ids, width=5, state="readonly")
            default_map = {1: "5", 2: "6", 3: "7", 4: "11"}
            combo.set(default_map.get(i, "1"))
            combo.pack(side="left", padx=5)
            self.mapping_comboboxes[i] = combo

            # Create a toggle button.
            btn = tk.Button(frame, text="Toggle", command=lambda light=i: self.toggle_light(light))
            btn.pack(side="left", padx=10)

    def toggle_light(self, sim_light):
        # Toggle the simulated light state.
        current_state = self.light_states.get(sim_light, "off")
        new_state = "on" if current_state.lower() == "off" else "off"
        self.light_states[sim_light] = new_state
        # Update the simulated light appearance.
        fill = "yellow" if new_state == "on" else "black"
        self.canvas.itemconfig(self.light_ids[sim_light], fill=fill)

        # Read the physical light ID from the combobox.
        physical_id_str = self.mapping_comboboxes[sim_light].get()
        try:
            physical_id = int(physical_id_str)
        except ValueError:
            messagebox.showerror("Mapping Error", f"Invalid physical light number for simulated light {sim_light}.")
            return

        # Update the real light.
        update_real_light(physical_id, new_state)


if __name__ == "__main__":
    # Connect to the Hue Bridge.
    connect_hue_bridge(HUE_BRIDGE_IP)

    # Create and run the simulator window.
    app = LightSimulatorWindow()
    app.mainloop()
